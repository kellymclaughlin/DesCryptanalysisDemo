/*
 * This file is provided to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * DesInputGenerator.java
 *
 * Created on April 15, 2006, 11:20 PM
 *
 */

import java.awt.Container;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SpringLayout;

/**
 * This class implements a JApplet that provides a user the means to generate
 * or enter a DES key and subsequently generate random input pairs for use in
 * the DesCryptanalysisApplet. 20,000 pairs are generated for each of the two
 * characteristics  used in the cryptanalysis and the "right pairs" that
 * are displayed in the applet text box (See the javadoc for the
 * DesCryptanalysis class for more details). The output plaintext/ciphertext
 * pairs generated by this applet can be used as input for the
 * DesCryptanalysisApplet.
 *
 * @author Kelly McLaughlin
 */
public class DesInputGeneratorApplet extends javax.swing.JApplet {
    private final int VERTICAL_SPACING_CONSTANT = 35;
    private SpringLayout layout;
    private JLabel appletTitleLabel;
    private JLabel ciphertextLabel;
    private JLabel keyLabel;
    private JLabel detailsLabel;

    private JTextArea pairsTextArea;
    private JTextArea detailsTextArea;
    private JScrollPane pairsScrollPane;
    private JScrollPane detailsScrollPane;
    private JTextField keyTextField;
    private JButton generateKeyButton;
    private JButton generateInputPairsButton;
    private JPanel errorPane;
    private GridBagConstraints c;

    /** Creates a new instance of DesInputGenerator */
    public DesInputGeneratorApplet() {
    }

    /**
     * This method is called by a browser to initialize an applet before the start() method is called.
     */
    public void init()
    {
        Container cp = getContentPane();

        appletTitleLabel = new JLabel("DES Plaintext/Ciphertext Pair Generation Applet");
        ciphertextLabel = new JLabel("Plaintext/Ciphertext Pairs:");
        keyLabel = new JLabel("Key:");
        detailsLabel = new JLabel("Details:");

        pairsTextArea = new JTextArea(20, 30);
        detailsTextArea = new JTextArea(10, 30);
        pairsScrollPane = new JScrollPane(pairsTextArea);
        detailsScrollPane = new JScrollPane(detailsTextArea);
        keyTextField = new JTextField(30);

        generateKeyButton = new JButton("Generate Key");
        generateInputPairsButton = new JButton("Generate Input Pairs");

        layout = new SpringLayout();
        cp.setLayout(layout);

        //Add the title to the content pane
        layout.putConstraint(SpringLayout.WEST, appletTitleLabel, 75, SpringLayout.WEST, cp);
        cp.add(appletTitleLabel);

        layout.putConstraint(SpringLayout.WEST, keyLabel, 5, SpringLayout.WEST, cp);
        layout.putConstraint(SpringLayout.NORTH, keyLabel, VERTICAL_SPACING_CONSTANT, SpringLayout.NORTH, cp);
        cp.add(keyLabel);

        layout.putConstraint(SpringLayout.WEST, keyTextField, 30, SpringLayout.WEST, cp);
        layout.putConstraint(SpringLayout.NORTH, keyTextField, VERTICAL_SPACING_CONSTANT+20, SpringLayout.NORTH, cp);
        cp.add(keyTextField);

        layout.putConstraint(SpringLayout.WEST, generateKeyButton, 130, SpringLayout.WEST, cp);
        layout.putConstraint(SpringLayout.NORTH, generateKeyButton, VERTICAL_SPACING_CONSTANT+70, SpringLayout.NORTH, cp);
        cp.add(generateKeyButton);

        layout.putConstraint(SpringLayout.WEST, ciphertextLabel, 5, SpringLayout.WEST, cp);
        layout.putConstraint(SpringLayout.NORTH, ciphertextLabel, VERTICAL_SPACING_CONSTANT+120, SpringLayout.NORTH, cp);
        cp.add(ciphertextLabel);

        layout.putConstraint(SpringLayout.WEST, pairsScrollPane, 30, SpringLayout.WEST, cp);
        layout.putConstraint(SpringLayout.NORTH, pairsScrollPane, VERTICAL_SPACING_CONSTANT+140, SpringLayout.NORTH, cp);
        cp.add(pairsScrollPane);

        layout.putConstraint(SpringLayout.WEST, generateInputPairsButton, 115, SpringLayout.WEST, cp);
        layout.putConstraint(SpringLayout.NORTH, generateInputPairsButton, VERTICAL_SPACING_CONSTANT+490, SpringLayout.NORTH, cp);
        cp.add(generateInputPairsButton);

        layout.putConstraint(SpringLayout.WEST, detailsLabel, 5, SpringLayout.WEST, cp);
        layout.putConstraint(SpringLayout.NORTH, detailsLabel, VERTICAL_SPACING_CONSTANT+530, SpringLayout.NORTH, cp);
        cp.add(detailsLabel);

        layout.putConstraint(SpringLayout.WEST, detailsScrollPane, 30, SpringLayout.WEST, cp);
        layout.putConstraint(SpringLayout.NORTH, detailsScrollPane, VERTICAL_SPACING_CONSTANT+550, SpringLayout.NORTH, cp);
        cp.add(detailsScrollPane);

        /** Add the action listener for the key generation button */
        generateKeyButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                DesCryptanalysis dca = new DesCryptanalysis();
                long key = dca.generateKey();

                keyTextField.setText(Long.toString(key));
            }
        });

        /** Add the action listener for the input generation button */
        generateInputPairsButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                long key = 0;

                String keyString = keyTextField.getText();

                if (keyString == null || keyString.equals(""))
                {
                    pairsTextArea.setText("Error: You must specify a key before generating input pairs.");
                    return;
                }
                else
                {
                    key = Long.parseLong(keyString);
                }

                DesCryptanalysis dca = new DesCryptanalysis();
                dca.setKey(key);

                ArrayList inputPairs = dca.generateInputPairs();

                int numberOfPairs = inputPairs.size();

                pairsTextArea.setText("");
                detailsTextArea.setText("");
                for (int i=0; i<numberOfPairs; i++)
                {
                    pairsTextArea.append((String)inputPairs.get(i));
                }

                //Add the details of the proces to the details text box
                detailsTextArea.append("Number of pairs generated: " + Integer.toString(DesCryptanalysis.DEFAULT_NUMBER_OF_TUPLES));
                detailsTextArea.append("\r\n");
                detailsTextArea.append("Number of right pairs for Characteristic One: " + dca.getNumberOfCharOneTuples());
                detailsTextArea.append("\r\n");
                detailsTextArea.append("Number of right pairs for Characteristic Two: " + dca.getNumberOfCharTwoTuples());
                detailsTextArea.append("\r\n");
                detailsTextArea.append("Perentage of right pairs for Characteristic One: " +
                        Float.toString((((float)dca.getNumberOfCharOneTuples()/(float)DesCryptanalysis.DEFAULT_NUMBER_OF_TUPLES) * 100)));
                detailsTextArea.append("%\r\n");
                detailsTextArea.append("Percentage of right pairs for Characteristic Two: " +
                        Float.toString((((float)dca.getNumberOfCharTwoTuples()/(float)DesCryptanalysis.DEFAULT_NUMBER_OF_TUPLES) * 100)));
                detailsTextArea.append("%\r\n");



            }
        });
    }
}
